#!/bin/sh
# venv
# Quick hack: manage virtualenvs
# Desc: lists, creates and deletes virtualenvs in a specified directory
#       autocompletes env names
#       can downgrade to pip version of choice
#       can edit & will apply .bash_profile files inside virtualenvs
#
# Install:
#       write this file as ~/.venv
#       mkdir -p ~/.venvs
#       add to ~/.profile: source ~/.venv

# Config
VERSION="1.3"
ENVDIR="$HOME/.venvs/"
VIRTUALENV=`which virtualenv`
RM=`which rm`
VENV_REGEX="[a-zA-Z0-9_-]+"


get_name() {
    if [ "$1" = "" ]
    then
        PWD=`pwd`
        NAME=`basename $PWD`
    else
        NAME=$1
    fi

    echo $NAME
}


# The venv
venv() {
    # Help (or blank)
    if [ "$1" = "help" ]
    then
        echo "# venv $VERSION"
        echo "# use tab complete for <name>, defaults to the current directory name"
        echo
        echo "Enter a virtualenv: venv <name>"
        echo "Create a virtualenv: venv create <name>"
        echo "Delete a virtualenv: venv delete <name>"
        echo "List virtualenvs: venv list"
        return 0
    fi

    # Listing
    if [ "$1" = "list" ]
    then
        find $ENVDIR -maxdepth 1 -type d | grep -oE "/$VENV_REGEX$" | grep -oE $VENV_REGEX
        return 0
    fi

    # Creating
    if [ "$1" = "create" ]
    then
        NAME=`get_name $2`

        if [ "$2" = "list" ] || [ "$2" = "create" ] || [ "$2" = "delete" ] || [ "$2" = "help" ]
        then
            echo "Cannot use names: list, create or delete"
            return 1
        fi

        echo "Creating virtualenv in $ENVDIR$NAME/"
        $VIRTUALENV "$ENVDIR$NAME/"

        # Enter the venv
        venv $NAME
        return 0
    fi

    # Deleting
    if [ "$1" = "delete" ]
    then
        NAME=`get_name $2`
        echo "About to delete virtualenv in $ENVDIR$NAME/"
        read -p "Are you sure? [Y/n] " -n 1 -r
        if [ "$REPLY" = "" ] || [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]
        then
            echo
            echo "Deleting  $ENVDIR$NAME/"
            $RM -rf "$ENVDIR$NAME/"
            return 0
        else
            return 0
        fi
    fi

    # Editing
    if [ "$1" = "edit" ]
    then
        NAME=`get_name $2`
        $EDITOR $ENVDIR$NAME/.bash_profile
        return 0
    fi

    # Else: enter
    NAME=`get_name $1`
    if [ ! -f "$ENVDIR$NAME/bin/activate" ]
    then
        echo "No virtualenv found in $ENVDIR$NAME/"
        return 1
    fi

    echo "Loading virtualenv: $ENVDIR$NAME"
    source "$ENVDIR$NAME/bin/activate"
    if [ -f "$ENVDIR$NAME/.bash_profile" ]
    then
        source "$ENVDIR$NAME/.bash_profile"
    fi
}

# Autocomplete
_complete_venv () {
    local cur

    # List current envs
    ENVS=`find $ENVDIR -maxdepth 1 -type d | grep -oE "/$VENV_REGEX$" | grep -oE $VENV_REGEX`

    # Autocomplete reply
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}

    if [ "$1" = "venv" ] && ([ "$3" = "venv" ] || [ "$3" = "delete" ] || [ "$3" = "edit" ])
    then
        COMPREPLY=( $( compgen -W '$ENVS' -- $cur ) )
    fi

    return 0
}
# Set autocomplete up
complete -F _complete_venv venv

