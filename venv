#!/bin/sh
# venv
# Quick hack: manage virtualenvs
# Desc: lists, creates and deletes virtualenvs in a specified directory
#       autocompletes env names
#       can downgrade to pip version of choice
#       can edit & will apply .bash_profile files inside virtualenvs
#
# Install:
#       write this file as ~/.venv
#       mkdir -p ~/.venvs
#       add to ~/.bash_profile: source ~/.venv

# Config
VERSION="1.5"
ENVDIR="$HOME/.venvs/"

# Shortcuts
VIRTUALENV=`which virtualenv`
PYTHON=`which python`
RM=`which rm`

# Venv folder regex
VENV_REGEX="[a-zA-Z0-9_-]+"


_venv_get_name() {
    if [ "$1" = "" ]; then
        if [ -f .venv ]; then
            NAME=`cat .venv`
        else
            PWD=`pwd`
            NAME=`basename $PWD`
        fi
    else
        NAME=$1
    fi

    echo $NAME
}


# The venv
venv() {
    # Help (or blank)
    if [ "$1" = "help" ]
    then
        cat <<EOF
# venv $VERSION
# use tab complete for <name, defaults to contents of .venv or cwd name

Usage:
    venv <name>          Enter a virtualenv
    venv create <name>   Create a virtualenv
    venv delete <name>   Delete a virtualenv
    venv list            List virtualenvs
EOF
        return 0
    fi

    # Listing
    if [ "$1" = "list" ]; then
        FILES=`find $ENVDIR -maxdepth 1 -type d | grep -oE "/$VENV_REGEX$" | grep -oE $VENV_REGEX`

        echo "# Available virtualenvs:"
        for file in $FILES; do
            echo "--> $file"
        done

        return 0
    fi

    # Creating
    if [ "$1" = "create" ]; then
        NAME=`_venv_get_name $2`

        if [ "$2" = "list" ] || [ "$2" = "create" ] || [ "$2" = "delete" ] || [ "$2" = "help" ]; then
            echo "--> Cannot use names: list, create or delete"
            return 1
        fi

        echo "--> Creating virtualenv in $ENVDIR$NAME/"

        # Check if we have -p in our argstring, and don't pass explicit Python if so
        ARGS="${@:3}"
        if [[ $ARGS == *"-p"* ]]; then
            $VIRTUALENV $ENVDIR$NAME/ $ARGS
        else
            $VIRTUALENV $ENVDIR$NAME/ -p $PYTHON $ARGS
        fi

        # Enter the venv
        venv $NAME

        echo "--> Upgrading pip"
        pip install pip --upgrade

        return 0
    fi

    # Deleting
    if [ "$1" = "delete" ]; then
        NAME=`_venv_get_name $2`
        echo "# About to delete virtualenv in $ENVDIR$NAME/"
        read -p "Are you sure? [Y/n] " -n 1 -r
        if [ "$REPLY" = "" ] || [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
            echo
            echo "--> Deleting  $ENVDIR$NAME/"
            $RM -rf "$ENVDIR$NAME/"
            return 0
        else
            return 0
        fi
    fi

    # Editing
    if [ "$1" = "edit" ]; then
        NAME=`_venv_get_name $2`
        $EDITOR $ENVDIR$NAME/.bash_profile
        return 0
    fi

    # Else: enter
    NAME=`_venv_get_name $1`
    if [ ! -f "$ENVDIR$NAME/bin/activate" ]; then
        echo "--> No virtualenv found in $ENVDIR$NAME/"
        return 1
    fi

    echo "--> Loading virtualenv: $ENVDIR$NAME"
    source "$ENVDIR$NAME/bin/activate"
    if [ -f "$ENVDIR$NAME/.bash_profile" ]; then
        source "$ENVDIR$NAME/.bash_profile"
    fi
}

# Autocomplete
_complete_venv () {
    local cur

    # List current envs
    ENVS=`find $ENVDIR -maxdepth 1 -type d | grep -oE "/$VENV_REGEX$" | grep -oE $VENV_REGEX`

    # Autocomplete reply
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}

    if [ "$1" = "venv" ] && ([ "$3" = "venv" ] || [ "$3" = "delete" ] || [ "$3" = "edit" ]); then
        COMPREPLY=( $( compgen -W '$ENVS' -- $cur ) )
    fi

    return 0
}
# Set autocomplete up
complete -F _complete_venv venv
